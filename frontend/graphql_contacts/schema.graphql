"""Exposes a URL that specifies the behavior of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behavior of this scalar."""
  url: String!
) on SCALAR

"""
Indicates exactly one field must be supplied and this field must not be `null`.
"""
directive @oneOf on INPUT_OBJECT

type Address {
  street: String!
  city: String!
  zipCode: String!
  country: String!
}

input AddressInput {
  street: String!
  city: String!
  zipCode: String!
  country: String!
}

type Contact implements Person {
  id: ID!
  email: String!
  name: String!
  address: Address
  phoneNumber: String
  gender: Gender!
  height: Float
  weight: Float
  socialNetworks: SocialNetworks
}

input CreateContactInput {
  email: String!
  name: String!
  address: AddressInput
  phoneNumber: String
  gender: Gender!
  height: Float
  weight: Float
  socialNetworks: SocialNetworksInput
}

input CreateUserInput {
  email: String!
  name: String!
  address: AddressInput
  phoneNumber: String
  gender: Gender!
  height: Float
  weight: Float
  socialNetworks: SocialNetworksInput
  password: String!
}

enum Gender {
  MALE
  FEMALE
  UNKNOWN
}

type Mutation {
  createUser(input: CreateUserInput!): User
  updateUser(input: UpdateUserInput!): User
  deleteUser: String
  createContact(input: CreateContactInput!): Contact
  updateContact(input: UpdateContactInput!): Contact
  deleteContact(input: ID!): String
  login(email: String!, password: String!): String
}

interface Person {
  id: ID!
  email: String!
  name: String!
  address: Address
  phoneNumber: String
  gender: Gender!
  height: Float
  weight: Float
  socialNetworks: SocialNetworks
}

type Query {
  user: User
  contact(id: ID!): Contact
  contacts: [Contact]
}

type SocialNetworks {
  facebookUrl: String
  twitterUrl: String
  instagramUrl: String
  linkedinUrl: String
}

input SocialNetworksInput {
  facebookUrl: String
  twitterUrl: String
  instagramUrl: String
  linkedinUrl: String
}

input UpdateContactInput {
  email: String
  name: String
  address: AddressInput
  phoneNumber: String
  gender: Gender
  height: Float
  weight: Float
  socialNetworks: SocialNetworksInput
}

input UpdateUserInput {
  name: String
  address: AddressInput
  phoneNumber: String
  gender: Gender
  height: Float
  weight: Float
  socialNetworks: SocialNetworksInput
}

type User implements Person {
  id: ID!
  email: String!
  name: String!
  address: Address
  phoneNumber: String
  gender: Gender!
  height: Float
  weight: Float
  socialNetworks: SocialNetworks
  contacts: [Contact]
  jwt: String
}

