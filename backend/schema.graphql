interface Person {
  id: ID!
  email: String!
  name: String!
  address: Address
  phoneNumber: String
  gender: Gender!
  height: Float
  weight: Float
  socialNetworks: SocialNetworks
}

type Contact implements Person{
  referral: User!
}

type Address {
  street: String!
  city: String!
  zip: String!
  country: String!
}

type SocialNetworks {
  facebookUrl: String
  twitterUrl: String
  instagramUrl: String
  linkedinUrl: String
}


type User implements Person{
  password: String!
  salt: String!
}

type Query {
  getUser(id: ID!): User
  getUsers(
    limit: Int
    offset: Int
    gender: Gender
    city: String
    minHeight: Float
    maxHeight: Float
    minWeight: Float
    maxWeight: Float
    hasSocialNetworks: Boolean
  ): [User!]!
  searchUsers(name: String!): [User!]!
}

enum Gender {
  MALE
  FEMALE
  UNKNOWN
}

input AddressInput {
  street: String!
  city: String!
  zip: String!
  country: String!
}

input PhoneNumberInput {
  type: String!
  number: String!
}

input SocialNetworksInput {
  facebookUrl: String
  twitterUrl: String
  instagramUrl: String
  linkedinUrl: String
}

input UserInput {
  email: String!
  name: String!
  address: AddressInput
  phoneNumber: PhoneNumberInput
  gender: Gender!
  height: Float
  weight: Float
  socialNetworks: SocialNetworksInput
}

input UpdateUserInput {
  email: String
  name: String
  address: AddressInput
  phoneNumber: PhoneNumberInput
  gender: Gender
  height: Float
  weight: Float
  socialNetworks: SocialNetworksInput
}
